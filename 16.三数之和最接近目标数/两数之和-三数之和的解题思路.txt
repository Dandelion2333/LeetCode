
解题思路一：常规方法 排序+双指针

例子：
	两数之和：
		1、按照升序排列后，数组就是单调递增。有利于做数据判断
		2、准备左右两个指针。获取两数之和。大于目标值，则左指针右移，小于目标值，则右指针左移。遍历一遍即可找到。
		3、时间复杂度为 n*logn+O(n)
	三数之和：
		1、同理两数之和。
		2、不同的地方在于。控制一个固定的值（从左向右遍历一遍），然后使用双指针。
		3、时间复杂度为：n*logn+O(n²)
		4、O(n²)肯定会很慢。所以可以采用内部优化算法。例如双指针不需要一个一个的遍历。而是可以采取二分法跳跃定位。
	
	
解题思路二：哈希表

例子：
	两数之和：
		1、哈希的特性。由key可以找到value，时间复杂度为O(1)。由于返回值是两数的下标，所以value保存数组的下标值。
		2、从左往右遍历。判断target-nums[i] 是否在哈希表的key中（官方认为这个判断时间复杂度为O(1)），
			假如在，则通过target-nums[i]这个key找到对应的value，获取第一个数值的下标。再加上自身的下标i。于是就找到了。
			假如否，则把nums[i]与i分别存到哈希表中的key与value。
		3、遍历一遍即可找到。所以时间复杂度为O(n)。相对于双指针，少了排序这个步骤。
	三数之和：
		1、同理两数之和。先确定一个数，然后两数之和使用哈希。
		2、时间复杂度也同理，不需要排序的过程。即为O(n²)
局限性：
	1、只能处理目标值为固定的数值。
	2、不能处理趋近于某个值，最接近与某个数值等类型的问题。
